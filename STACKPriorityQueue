//用堆实现的优先队列，和链式实现的优先队列有本质上的区别，在构建的时候，是根据key值得大小插入堆结构定义的数组里，每插入一个元素就要
//针对数组最后一个元素进行上浮操作，同理，在出队的时候就要将队首打印赋为最大值，然后将其下调（这个操作的实现是将当前每一个底端元素调整，直到冲新平衡为止）
//删除操作其实很简单，实现方法与逻辑上的堆定义毫无关系，只是在数组中将其删掉就可以了。由于之前都是按照优先顺序排列的，
//那么现在直接在数组里删掉某一节点，这种做法对数组将来的出队操作没有任何的影响，但是也许会破坏堆的平衡，这里偷一个懒了，因为毕竟删除操作是排在出队之前
//单单就实验验收来讲，应该没什么问题，但是实际应用就是垃圾、
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#define MAXSIZE 100
#define keytype int
#define valuetype int
#define MAXKEY 10000
typedef struct minstack
{
	keytype key;
	valuetype value;
}STACK;
void insertnode(STACK *sta, int nosize)
{
	int in, on;
	printf_s("请输入节点/key值/value值：");
	scanf_s("%d", &in);
	scanf_s("%d", &on);
	sta[nosize].key = in;
	sta[nosize].value = on;
}
int getlevel(int nosize)
{
	int i=1;
	int j=1;
	while (j < nosize)
	{
		j *= 2;
		j += 1;
		i++;
		if (j >= nosize)
		{
			return i;
		}
	}
}

void adjustnode(STACK *sta,int nosize)
{
	int i,m;
	keytype k;
	valuetype v;
	int level;
	level = getlevel(nosize);
	
	
		for (i = 1; i < level; i++)
		{
			if (sta[nosize].key <= sta[nosize / 2].key)
			{
				k = sta[nosize / 2].key;
				v = sta[nosize / 2].value;
				sta[nosize / 2].key = sta[nosize].key;
				sta[nosize / 2].value = sta[nosize].value;
				sta[nosize].key = k;
				sta[nosize].value = v;
				nosize /= 2;
			}
			else;
		}
		
	
	//return sta;
}

void outnode(STACK *sta, int nosize)
{

	int i,k,temp,temq;
	int level = getlevel(nosize);
	for (i = 1; i <= nosize; i++) {
		printf_s("(%d,%d)\n", sta[1].key, sta[1].value);//时间复杂度竟然是n^2;
		sta[1].key = MAXKEY;
		for (k = 1; k < nosize; k++)
		{
			adjustnode(sta, nosize - k + 1);
		}
	}
}



void findnode(STACK *sta, keytype key, int nosize)
{
	int i, k;
	int  flag =0;
	for (i = 1; i <= nosize; i++)
	{
		if (sta[i].key == key)
		{
			flag = 1;
			printf_s("查询成功！且你要查询的key值对应的value值为：%d\n", sta[i].value);
			break;
		}
		else;
	}
	if (!flag)
	{
		printf_s("查询失败！\n");
	}
}
int deletenode(STACK *sta, keytype key,int nosize)
{
	int i,k;
	for (i = 1; i <= nosize; i++)
	{
		if (sta[i].key == key)
		{
			for (k = i; k < nosize; k++)
			{
				sta[k].key = sta[k + 1].key;
				sta[k].value = sta[k + 1].value;
			}
			nosize -= 1;
		}
	}
	return nosize;
}



void printorinalarray(STACK *sta,int nosize)
{
	int i;
	for (i = 1; i <= nosize; i++)
	{
		printf_s("(%d,%d)   ", sta[i].key, sta[i].value);
	}
}
int main()
{
	STACK sta[MAXSIZE];
	int nosize;
	int key;
	int KEY;
	printf_s("输入堆元素个数：\n");
	scanf_s("%d", &nosize);
	for (int i = 1; i <=nosize; i++)
	{
		insertnode(sta,i);
		adjustnode(sta,i);
	}
	printorinalarray(sta, nosize);
	printf_s("查找元素：\n");
	printf_s("请输入你要查找的key值：\n");
	scanf_s("%d", &KEY);
	findnode(sta, KEY, nosize);
	printf_s("输入删除元素key值：\n");
	scanf_s("%d", &key);
	nosize=deletenode(sta, key, nosize);
	printorinalarray(sta, nosize);
	printf_s("出队：\n");
	outnode(sta, nosize);
	system("pause");
	return 0;
}
