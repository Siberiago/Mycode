#include <iostream>
using namespace std;
/*采用左孩子右兄弟法保存普通树
而且此时采用先序遍历时发现无论是二叉树还是转化之前的普通树，其遍历结果都是一样的，所以可以直接才用左孩子右兄弟法直接
存储普通树，这里的逻辑结构是普通树，而实际的物理结构则是二叉链表
之后的所有操作都是针对二叉树的，包括将每个单独的二叉树构成的森林转化为一个比较大的二叉树和将得到的新二叉树转化为森林；

*/
typedef struct treestruct
{
	struct treestruct *firstchild;
	struct treestruct *rightbrother;
	char data;
}node, *tree;

void PreCreatetree(tree *T)
{
	char ch;

	cin >> ch;
	if (ch == '#')*T = NULL;
	else
	{
		*T = (node*)malloc(sizeof(struct treestruct));
		(*T)->data = ch;
		PreCreatetree(&(*T)->firstchild);
		PreCreatetree(&(*T)->rightbrother);
	}
}
void Pretraveltree(tree T)
{
	if (T)
	{
		cout << T->data << " ";
		Pretraveltree(T->firstchild);
		Pretraveltree(T->rightbrother);
	}
}
void Fortotree(tree T1, tree T2)
{
	node *ptr;
	if (!(T1->rightbrother))//T1没有右子树，直接将T2接在T1的右子树位置；
	{
		T1->rightbrother = T2;
	}
	else
	{
		ptr = T1;
		while (ptr->rightbrother)
		{
			ptr = ptr->rightbrother;
		}
		ptr->rightbrother = T2;
	}
}
void Treetofor(tree T0)
{
	//拆分原则：右子树中若某一节点只有右子树没有左子树则要拆分；
	node *ptr;
	node *TX;
	node *turnnode0;
	node *turnnode1;
	if (T0)
	{
		ptr = T0;
		T0 = ptr;
		turnnode0 = T0;
		while (ptr&&(ptr->rightbrother))
		{
			turnnode0 = ptr;
			ptr = ptr->rightbrother;
			if (!(ptr->rightbrother))
			{
				TX = ptr;
				ptr = turnnode0;
				cout << endl<<"拆分的二叉树为：" << endl;
				Pretraveltree(TX);
				ptr->rightbrother = NULL;
				ptr = T0;
			}
		}
	}
}
//ABE#F##C#DG####
//HIL##JM##KN####
//OP#QS#T##R###
//UVW#X#Y##Z###
int main()
{
	tree T1,T2,T3,T4,T0;
	cout << "左孩子右兄弟建立普通树方法：" << endl << "先输入节点是其父亲节点的第一个孩子节点，孩子以#表示输入完毕，再输入父亲节点的右侧兄弟节点，以#表示输入完毕" << endl<<endl;
	
	
	cout <<endl<< "采用左孩子右兄弟法建立普通树1：" << endl;
	PreCreatetree(&T1);
	cout << endl << "先序遍历第1棵普通树" << endl;
	Pretraveltree(T1);

	cout << endl<<endl << "采用左孩子右兄弟法建立普通树2：" << endl;
	PreCreatetree(&T2);
    cout << endl << "先序遍历第2棵普通树" << endl;
	Pretraveltree(T2);

	cout << endl << endl << "采用左孩子右兄弟法建立普通树3：" << endl;
	PreCreatetree(&T3);
	cout << endl << "先序遍历第3棵普通树" << endl;
	Pretraveltree(T3);

	cout <<endl<< endl << "采用左孩子右兄弟法建立普通树4：" << endl;
	PreCreatetree(&T4);
	cout << endl << "先序遍历第4棵普通树" << endl;
	Pretraveltree(T4);

	cout << endl<<endl << "将第二棵树并入前树形成新的二叉树:" << endl;
	Fortotree(T1, T2);
	cout << endl << "先序遍历并入后的二叉树" << endl;
	Pretraveltree(T1);

	cout << endl << endl << "将第三棵树并入前树形成新的二叉树:" << endl;
	Fortotree(T1, T3);
	cout << endl << "先序遍历并入后的二叉树" << endl;
	Pretraveltree(T1);

	cout << endl << endl << "将第四棵树并入前树形成新的二叉树:" << endl;
	Fortotree(T1, T4);
	cout << endl << "先序遍历并入后的二叉树" << endl;
	Pretraveltree(T1);


	cout <<endl<<endl <<"拆分二叉树：" << endl;
	Treetofor(T1);
	cout<<endl << "剩余二叉树为：" << endl;
	Pretraveltree(T1);
	cout << endl;
	system("pause");
	return 0;
}
/*You should be shame!*/
